sample_N(alpha,35)
sample_N(alpha,35)
sample_N(alpha,35)
sample_N(alpha,35)
sample_N(alpha,35)
sample_N(alpha,35)
sample_N(alpha,10)
sample_N(alpha,10)
sample_N(alpha,10)
sample_N(alpha,10)
q <- dirichlet(alpha)
q
dirichlet(alpha)
dirichlet(alpha)
dirichlet(alpha)
dirichlet(alpha)
dirichlet(alpha)
dirichlet(alpha)
dirichlet(alpha)
dirichlet(alpha)
dirichlet(alpha)
dirichlet(alpha)
dirichlet(alpha)
alpha
x
a_prior <- rep(20,4)
x <- c(55,57,48,40)
alpha <- x + a_prior
alpha
b = replicate(10000,estimate_p(alpha,n = 35))
mean(b)
hist(b)
hist(b,breaks = 100)
hist(b,breaks = 100)
c = replicate(10000,expectation_p(alpha,n=35))
hist(c,breaks = 100)
mean(b)
mean(c)
log(!)
log(1)
log(10)
log(exp(-x))
log(exp(-4))
alpha
alpha = 20
sample_cf(20,1000)
b1 = sample_cf(20,1000)
mean(b1)
f_star <- function(x,alpha) {
#evaluate f_star(x)
return(ifelse(x > 0, x^(alpha-1)*exp(-x), 0))
}
log_f_star <- function(x,alpha) {
return(ifelse(x > 0, (alpha-1)*log(x) - x,0))
}
sample_cf <- function(alpha,no_samples) {
a = sqrt(f_star((alpha-1),alpha))
b_plus = sqrt((alpha+1)^2*f_star((alpha+1),alpha))
#a = sqrt(alpha-1)
#b_plus = sqrt(alpha+1)
b_minus = 0
x1 = runif(no_samples)*a
x2 = runif(no_samples)*b_plus
x <- (ifelse(x1 < sqrt(f_star(x2/x1,alpha)), x2/x1, NaN))
x <- x[!is.na(x)]
return(x)
#also find out how to implement on log-scale
}
sample_cf_log <- function(alpha, no_samples) {
a = exp(0.5*log_f_star((alpha-1),alpha))
b_plus = (alpha+1) * exp(0.5*log_f_star(alpha+1,alpha))
b_minus = 0
x1 = runif(no_samples)*a
x2 = runif(no_samples)*b_plus
x <- (ifelse(x1 < sqrt(f_star(x2/x1,alpha)), x2/x1, NaN))
x <- x[!is.na(x)]
return(x)
}
alpha
sample_cf_log(alpha,1000)
b1
hist(b1,breaks = 100)
b2 = sample_cf_log(alpha,1000)
hist(b2,breaks = 100)
mean(b1)
mean(b2)
b2 = sample_cf_log(alpha,10000)
alpha = 40
nsims = 10000
b1 = sample_cf(alpha,nsims)
b2 = samlple_cf_log(alpha,nsims)
b2 = sample_cf_log(alpha,nsims)
b2
mean(b1)
mean(b2)
hist(b1,breaks = 100)
hist(b2, breaks = 100)
alpha = 100
b1 = sample_cf(alpha,nsims)
b1
b1 = sample_cf(1000,nsims)
mean(b1)
b2 = sample_cf_log(1000,nsims)
mean(b2)
b2
b1
log_f_star(1000-1,1000)
log(0)
-Inf
alpha = 100
alpha = 1000
log_b_plus = log(alpha+1) + (0.5*log_f_star(alpha+1,alpha))
log_b_plus
exp(log_b_plus)
log_b_plus
log(0.001)
log(1)
f_star(alpha-1,alpha)
alpha-1
log_f_star(alpha-1,alpha)
log(alpha-1)
(alpha-1)*log(alpha-1)
-(alpha-1)
log(0)
log_f_star <- function(x,alpha) {
return(ifelse(x > 0, (alpha-1)*log(x) - x,-Inf))
}
-Inf/-Inf
log_a
log_a = 0.5*log_f_star((alpha-1),alpha)
e^(log_a)
log_a
exp(log_a)
log(1)
alpha
log(alpha)
f_star
f_star(log(alpha-1),log(alpha))
library(boot)
coal_df <- data.frame(coal[1], c(1:nrow(coal)))
plot(coal_df)
t_n = coal
help(rgamma)
rgamma(2)
rgamma(2,1)
a,b <- rgamma(2,1)
c(a,b) <- rgamma(2,1)
lambda <- rgamma(2,1)
runif
help(runif)
lambda_sample
beta <- 10
lambda_sample <- rgamma(2,2, scale = 1/beta)
lambda_sample
prod(lambda_sample)
t0 <- 0
t1 <- 1
t2 <- 3
t <- c(t1,t2,t3)
t0 <- 0
t1 <- 1
t2 <- 3
t <- c(t0,t1,t2)
lambda_sample <- rgamma(2,2, scale = 1/beta)
t <- runif(1, min = t[1], max = t[length(t)] )
return((prod(lambda_sample)/beta_sample^5)*exp(-(1/beta_sample)*(1+sum(lambda_sample))))
}
beta_sample <- beta
lambda_sample <- rgamma(2,2, scale = 1/beta_sample)
t <- runif(1, min = t[1], max = t[length(t)] )
return((prod(lambda_sample)/beta_sample^5)*exp(-(1/beta_sample)*(1+sum(lambda_sample))))
(prod(lambda_sample)/beta_sample^5)*exp(-(1/beta_sample)*(1+sum(lambda_sample)))
setwd("~/Rstudio/TMA4300/Ex3")
u <- read.table("u",header=T)
z <- read.table("z",header=T)
setwd("~/Rstudio/TMA4300/Ex3")
setwd("~/Rstudio/TMA4300/Ex3")
u <- read.table("u",header=T)
z <- read.table("z",header=T)
u <- read.table("u.txt",header=T)
z <- read.table("z.txt",header=T)
u
z
u <- read.table("u.txt",header=F)
z <- read.table("z.txt",header=F)
length(u)
u
dim(u)
u2 <- scan('u.txt')
u2
length(u2)
class(u2)
u <- scan("u.txt")
z <- scan("z.txt")
u
z
u*z
u
exp(a*z)
lambda.t_0 = 0.5
n/(sum(u*z + (1-u)*((1/lambda.t_0) - z/(exp(lambda.t_0*z)-1))))
lambda.t_0 = 10000
n/(sum(u*z + (1-u)*((1/lambda.t_0) - z/(exp(lambda.t_0*z)-1))))
lambda.t_0 = n/(sum(u*z + (1-u)*((1/lambda.t_0) - z/(exp(lambda.t_0*z)-1))))
lambda.t_0 = n/(sum(u*z + (1-u)*((1/lambda.t_0) - z/(exp(lambda.t_0*z)-1))))
lambda.t_0 = n/(sum(u*z + (1-u)*((1/lambda.t_0) - z/(exp(lambda.t_0*z)-1))))
lambda.t_0 = n/(sum(u*z + (1-u)*((1/lambda.t_0) - z/(exp(lambda.t_0*z)-1))))
lambda.t_0 = n/(sum(u*z + (1-u)*((1/lambda.t_0) - z/(exp(lambda.t_0*z)-1))))
lambda.t_0 = n/(sum(u*z + (1-u)*((1/lambda.t_0) - z/(exp(lambda.t_0*z)-1))))
lambda.t_0 = n/(sum(u*z + (1-u)*((1/lambda.t_0) - z/(exp(lambda.t_0*z)-1))))
lambda.t_0 = n/(sum(u*z + (1-u)*((1/lambda.t_0) - z/(exp(lambda.t_0*z)-1))))
lambda.t_0 = n/(sum(u*z + (1-u)*((1/lambda.t_0) - z/(exp(lambda.t_0*z)-1))))
lambda.t_0 = n/(sum(u*z + (1-u)*((1/lambda.t_0) - z/(exp(lambda.t_0*z)-1))))
lambda.t_0 = n/(sum(u*z + (1-u)*((1/lambda.t_0) - z/(exp(lambda.t_0*z)-1))))
lambda.t_0 = n/(sum(u*z + (1-u)*((1/lambda.t_0) - z/(exp(lambda.t_0*z)-1))))
lambda.t_0 = n/(sum(u*z + (1-u)*((1/lambda.t_0) - z/(exp(lambda.t_0*z)-1))))
lambda.t_0 = n/(sum(u*z + (1-u)*((1/lambda.t_0) - z/(exp(lambda.t_0*z)-1))))
lambda.t_0 = n/(sum(u*z + (1-u)*((1/lambda.t_0) - z/(exp(lambda.t_0*z)-1))))
lambda.t_0 = n/(sum(u*z + (1-u)*((1/lambda.t_0) - z/(exp(lambda.t_0*z)-1))))
lambda.t_0
e-10
1e-10
dQ.lambda_0 <- function(lambda.t_0) {
max.lambda_0 <- n/(sum(u*z + (1-u)*((1/lambda.t_0) - z/(exp(lambda.t_0*z)-1))))
return(max.lambda_0)
}
lambda_0 <- 100
lambda.vec <- c(lambda_0, dQ.lambda_0(lambda_0))
lambda.vec
EM.lambda_0 <- function(lambda_0) {
tol <- 1e-5
lambda.vec <- c(lambda_0, dQ.lambda_0(lambda_0))
i <- 2
while (lambda.vec[i] - lambda.vec[i-1] > tol) {
lambda.vec <- c(lambda.vec, dQ.lambda_0(lambda.vec[i]))
i <- i + 1
}
return(lambda.vec)
}
EM.lambda_0(100)
dQ.lambda_0 <- function(lambda.t_0) {
max.lambda_0 <- n/(sum(u*z + (1-u)*((1/lambda.t_0) - z/(exp(lambda.t_0*z)-1))))
return(max.lambda_0)
}
dQ.lambda_1 <- function(lambda.t_1) {
max.lambda_1 <- n/(sum((1-u)*z + u*((1/lambda.t_1) - z/(exp(lambda.t_1*z)-1))))
return(max.lambda_1)
}
EM.lambda_0 <- function(lambda_0) {
tol <- 1e-5
lambda.vec <- c(lambda_0, dQ.lambda_0(lambda_0))
i <- 2
while (lambda.vec[i] - lambda.vec[i-1] > tol) {
lambda.vec <- c(lambda.vec, dQ.lambda_0(lambda.vec[i]))
i <- i + 1
}
return(lambda.vec)
}
EM.lambda_1 <- function(lambda_1) {
tol <- 1e-5
lambda.vec <- c(lambda_1, dQ.lambda_1(lambda_1))
i <- 2
while (lambda.vec[i] - lambda.vec[i-1] > tol) {
lambda.vec <- c(lambda.vec, dQ.lambda_1(lambda.vec[i]))
i <- i + 1
}
return(lambda.vec)
}
EM.lambda_0(100)
EM.lambda_1(100)
EM.lambda_1(0.100)
EM.lambda_0(0.100)
EM.lambda_0(-0.100)
EM.lambda_0(0.100)
z
u
z[u]
u
u == 1
z[u == 1]
length(z[u == 1])
hist(z[u == 1], breaks = 20)
hist(z[u == 1], breaks = 10)
hist(z[u == 1], breaks = 100)
hist(z[u == 1], breaks = 10)
lambda.vec
EM.lambda_0(100)
u*z + (1-u)*((1/lambda.t_0) - (z/(exp(lambda.t_0*z)-1)))
sum(u*z + (1-u)*((1/lambda.t_0) - (z/(exp(lambda.t_0*z)-1))))
n
n <- length(u)
n/sum(u*z + (1-u)*((1/lambda.t_0) - (z/(exp(lambda.t_0*z)-1))))
EM.lambda_0(100)
EM.lambda_0 <- function(lambda_0) {
tol <- 1e-5
lambda.vec <- c(lambda_0, dQ.lambda_0(lambda_0))
i <- 2
while ((lambda.vec[i] - lambda.vec[i-1])^2 > tol) {
lambda.vec <- c(lambda.vec, dQ.lambda_0(lambda.vec[i]))
i <- i + 1
}
return(lambda.vec)
}
EM.lambda_1 <- function(lambda_1) {
tol <- 1e-5
lambda.vec <- c(lambda_1, dQ.lambda_1(lambda_1))
i <- 2
while ((lambda.vec[i] - lambda.vec[i-1])^2 > tol) {
lambda.vec <- c(lambda.vec, dQ.lambda_1(lambda.vec[i]))
i <- i + 1
}
return(lambda.vec)
}
EM.lambda_0(1)
EM.lambda_1(1)
t.lambda_0 <- EM.lambda_0(0.1)
t.lambda_1 <- EM.lambda_1(0.1)
par(mfrow = c(1,2))
par(mfrow = c(1,2))
plot(t.lambda_0)
plot(t.lambda_1)
plot(t.lambda_0,type = 'l')
par(mfrow = c(1,2))
plot(t.lambda_0,type = 'o')
plot(t.lambda_1,type = 'o')
TOL <- 1e-8
EM.lambda_0 <- function(lambda_0) {
lambda.vec <- c(lambda_0, dQ.lambda_0(lambda_0))
i <- 2
while ((lambda.vec[i] - lambda.vec[i-1])^2 > TOL) {
lambda.vec <- c(lambda.vec, dQ.lambda_0(lambda.vec[i]))
i <- i + 1
}
return(lambda.vec)
}
EM.lambda_1 <- function(lambda_1) {
lambda.vec <- c(lambda_1, dQ.lambda_1(lambda_1))
i <- 2
while ((lambda.vec[i] - lambda.vec[i-1])^2 > TOL) {
lambda.vec <- c(lambda.vec, dQ.lambda_1(lambda.vec[i]))
i <- i + 1
}
return(lambda.vec)
}
t.lambda_0 <- EM.lambda_0(0.1)
t.lambda_1 <- EM.lambda_1(0.1)
par(mfrow = c(1,2))
plot(t.lambda_0,type = 'o')
plot(t.lambda_1,type = 'o')
sample(100, replace = TRUE)
z[sample(100, replace = TRUE)]
sample(100, replace = TRUE)
z
plot(z)
dQ.lambda_0 <- function(u,z,lambda.t_0) {
max.lambda_0 <- n/(sum(u*z + (1-u)*((1/lambda.t_0) - z/(exp(lambda.t_0*z)-1))))
return(max.lambda_0)
}
dQ.lambda_1 <- function(u,z,lambda.t_1) {
max.lambda_1 <- n/(sum((1-u)*z + u*((1/lambda.t_1) - z/(exp(lambda.t_1*z)-1))))
return(max.lambda_1)
}
EM.lambda_0 <- function(u,z,lambda_0) {
lambda.vec <- c(lambda_0, dQ.lambda_0(u,z,lambda_0))
i <- 2
while ((lambda.vec[i] - lambda.vec[i-1])^2 > TOL) {
lambda.vec <- c(lambda.vec, dQ.lambda_0(u,z,lambda.vec[i]))
i <- i + 1
}
return(lambda.vec)
}
EM.lambda_1 <- function(u,z,lambda_1) {
lambda.vec <- c(lambda_1, dQ.lambda_1(u,z,lambda_1))
i <- 2
while ((lambda.vec[i] - lambda.vec[i-1])^2 > TOL) {
lambda.vec <- c(lambda.vec, dQ.lambda_1(u,z,lambda.vec[i]))
i <- i + 1
}
return(lambda.vec)
}
data.l0 <- t.lambda_0[length(t.lambda_0)]
data.l1 <- t.lambda_1[length(t.lambda_1)]
data.l0
data.l1
### 3C
bootstrap.z.u <- function(z,u) {
# Return a bootstrapped dataset of pairs z,u
idx <- sample(length(u), replace = TRUE)
return(z[idx],u[idx])
}
B = 5000
lambda_0.boot <- rep(NA,B)
lambda_1.boot <- rep(NA,B)
for (i in 1:B) {
bs.sample <- bootstrap.z.u(z,u)
boot.z <- bs.sample[1]
boot.u <- bs.sample[2]
t.lambda_0 <- EM.lambda_0(boot.u, boot.z, 0.1)
t.lambda_1 <- EM.lambda_1(boot.u, boot.z, 0.1)
lambda_0.boot[i] <- t.lambda_0[length(t.lambda_0)]
lambda_1.boot[i] <- t.lambda_1[length(t.lambda_1)]
}
bootstrap.z.u <- function(z,u) {
# Return a bootstrapped dataset of pairs z,u
idx <- sample(length(u), replace = TRUE)
return(c(z[idx],u[idx]))
}
B = 5000
lambda_0.boot <- rep(NA,B)
lambda_1.boot <- rep(NA,B)
for (i in 1:B) {
bs.sample <- bootstrap.z.u(z,u)
boot.z <- bs.sample[1]
boot.u <- bs.sample[2]
t.lambda_0 <- EM.lambda_0(boot.u, boot.z, 0.1)
t.lambda_1 <- EM.lambda_1(boot.u, boot.z, 0.1)
lambda_0.boot[i] <- t.lambda_0[length(t.lambda_0)]
lambda_1.boot[i] <- t.lambda_1[length(t.lambda_1)]
}
### 3C
bootstrap.z.u <- function(z,u) {
# Return a bootstrapped dataset of pairs z,u
idx <- sample(length(u), replace = TRUE)
return(c(z[idx],u[idx]))
}
B = 5000
lambda_0.boot <- rep(NA,B)
lambda_1.boot <- rep(NA,B)
for (i in 1:B) {
print(i)
bs.sample <- bootstrap.z.u(z,u)
boot.z <- bs.sample[1]
boot.u <- bs.sample[2]
t.lambda_0 <- EM.lambda_0(boot.u, boot.z, 0.1)
t.lambda_1 <- EM.lambda_1(boot.u, boot.z, 0.1)
lambda_0.boot[i] <- t.lambda_0[length(t.lambda_0)]
lambda_1.boot[i] <- t.lambda_1[length(t.lambda_1)]
}
### 3C
bootstrap.z.u <- function(z,u) {
# Return a bootstrapped dataset of pairs z,u
idx <- sample(length(u), replace = TRUE)
return(c(z[idx],u[idx]))
}
B = 5000
lambda_0.boot <- rep(NA,B)
lambda_1.boot <- rep(NA,B)
for (i in 1:B) {
print(i)
bs.sample <- bootstrap.z.u(z,u)
boot.z <- bs.sample[1]
boot.u <- bs.sample[2]
print('bab')
t.lambda_0 <- EM.lambda_0(boot.u, boot.z, 0.1)
t.lambda_1 <- EM.lambda_1(boot.u, boot.z, 0.1)
lambda_0.boot[i] <- t.lambda_0[length(t.lambda_0)]
lambda_1.boot[i] <- t.lambda_1[length(t.lambda_1)]
}
boot.u
boot.z
bootstrap.z.u <- function(z,u) {
# Return a bootstrapped dataset of pairs z,u
idx <- sample(length(u), replace = TRUE)
return(list(z[idx],u[idx]))
}
B = 5000
lambda_0.boot <- rep(NA,B)
lambda_1.boot <- rep(NA,B)
for (i in 1:B) {
print(i)
bs.sample <- bootstrap.z.u(z,u)
boot.z <- bs.sample[1]
boot.u <- bs.sample[2]
print('bab')
t.lambda_0 <- EM.lambda_0(boot.u, boot.z, 0.1)
t.lambda_1 <- EM.lambda_1(boot.u, boot.z, 0.1)
lambda_0.boot[i] <- t.lambda_0[length(t.lambda_0)]
lambda_1.boot[i] <- t.lambda_1[length(t.lambda_1)]
}
bs.sample
bs.sample[1]
class(bs.sample[1])
unlist(bs.sample[1])
B = 5000
lambda_0.boot <- rep(NA,B)
lambda_1.boot <- rep(NA,B)
for (i in 1:B) {
print(i)
bs.sample <- bootstrap.z.u(z,u)
boot.z <- unlist(bs.sample[1])
boot.u <- unlist(bs.sample[2])
print('bab')
t.lambda_0 <- EM.lambda_0(boot.u, boot.z, 0.1)
t.lambda_1 <- EM.lambda_1(boot.u, boot.z, 0.1)
lambda_0.boot[i] <- t.lambda_0[length(t.lambda_0)]
lambda_1.boot[i] <- t.lambda_1[length(t.lambda_1)]
}
lambda_0.boot
lambda_1.boot
cor(lambda_0.boot,lambda_1.boot)
help(cor)
bias_0 <- data.l0 - mean(lambda_0.boot)
bias_1 <- data.l1 - mean(lambda_1.boot)
bias_0
bias_1
plot((t.lambda_0[length(t.lambda_0)]-t.lambda_0),type = 'o')
plot((t.lambda_1[length(t.lambda_1)]-t.lambda_1),type = 'o')
setwd("~/Rstudio/Fotball")
require(data.table)
raw.data <- data.table(read.csv('data/SC0.csv'))
R.version()
R.Version()
